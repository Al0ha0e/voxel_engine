#version 450
#extension GL_ARB_separate_shader_objects: enable
#extension GL_GOOGLE_include_directive : enable
#include "terrain_util.h"
#include "qef.h"

layout(std430, set = 0, binding = 0) buffer GridInfoSSBO {
    ivec3 GridCenter[16];
} ;

layout (std430, set = 0, binding = 1) buffer EdgePositionSSBO {
    float EdgePosition[];
} ;

layout (std430, set = 0, binding = 2) buffer EdgeNormalSSBO {
    vec3 EdgeNormal[];
} ;

layout (std430, set = 0, binding = 3) buffer EdgeInfoSSBO {
    uint EdgeInfo[];
} ;

layout (std430, set = 0, binding = 4) buffer VertPositionSSBO {
    vec3 VertPosition[];
} ;

layout (std430, set = 0, binding = 5) buffer VertNormalSSBO {
    vec3 VertNormal[];
} ;

layout (std430, set = 0, binding = 6) buffer VertInfoSSBO {
    uint VertInfo[];
} ;

void AddEdge(
    uint eidx, 
    uint dim, 
    vec3 position,
    inout bool valid,
    inout mat3 ATA, 
	inout vec4 ATb,
	inout vec4 pointaccum,
    inout vec3 normalaccum)    
{
    uint info = EdgeInfo[eidx];
    if((info & 1) > 0){
        valid = true;
        position[dim] += EdgePosition[eidx];
        vec3 normal = EdgeNormal[eidx];
        QEFAdd(normal,position,ATA,ATb,pointaccum);
        normalaccum += normal;
    }
}


layout (local_size_x = 16, local_size_y = 16, local_size_z = 4) in;
void main ()
{
    uint level = gl_WorkGroupID.x / gridStorageSize;
    uvec3 block_pos, cell_pos, global_cell_pos;
    block_pos.y = gl_WorkGroupID.y;
    block_pos.z = gl_WorkGroupID.z >> 2;
    block_pos.x = gl_WorkGroupID.x - level * gridStorageSize;
    cell_pos.xy = gl_LocalInvocationID.xy;
    cell_pos.z = ((gl_WorkGroupID.z & 3) << 2) + gl_LocalInvocationID.z;
    global_cell_pos = (block_pos << 4) + cell_pos;
    uvec3 offset = GridCenter[level] & 3;
    uint vidx = GetVertIdx(level, block_pos, cell_pos, offset);
    uint eidx;
    bool valid = false;
    mat3 ATA = mat3(0.0);
    vec4 ATb = vec4(0), pointaccum = vec4(0);
    vec3 normalaccum = vec3(0);

    eidx = GetEdgeIdx(level, 0, global_cell_pos, offset);
    AddEdge(eidx, 0,  vec3(0,0,0), valid, ATA, ATb, pointaccum, normalaccum);
    eidx = GetEdgeIdx(level, 0, uvec3(global_cell_pos.x, global_cell_pos.y + 1, global_cell_pos.z), offset);
    AddEdge(eidx, 0,  vec3(0,1,0), valid, ATA, ATb, pointaccum, normalaccum);
    eidx = GetEdgeIdx(level, 0, uvec3(global_cell_pos.x, global_cell_pos.y, global_cell_pos.z + 1), offset);
    AddEdge(eidx, 0,  vec3(0,0,1), valid, ATA, ATb, pointaccum, normalaccum);
    eidx = GetEdgeIdx(level, 0, uvec3(global_cell_pos.x, global_cell_pos.y + 1, global_cell_pos.z + 1), offset);
    AddEdge(eidx, 0,  vec3(0,1,1), valid, ATA, ATb, pointaccum, normalaccum);

    eidx = GetEdgeIdx(level, 1, global_cell_pos, offset);
    AddEdge(eidx, 1, vec3(0,0,0), valid, ATA, ATb, pointaccum, normalaccum);
    eidx = GetEdgeIdx(level, 1, uvec3(global_cell_pos.x + 1, global_cell_pos.y, global_cell_pos.z), offset);
    AddEdge(eidx, 1, vec3(1,0,0), valid, ATA, ATb, pointaccum, normalaccum);
    eidx = GetEdgeIdx(level, 1, uvec3(global_cell_pos.x, global_cell_pos.y, global_cell_pos.z + 1), offset);
    AddEdge(eidx, 1, vec3(0,0,1), valid, ATA, ATb, pointaccum, normalaccum);
    eidx = GetEdgeIdx(level, 1, uvec3(global_cell_pos.x + 1, global_cell_pos.y, global_cell_pos.z + 1), offset);
    AddEdge(eidx, 1, vec3(1,0,1), valid, ATA, ATb, pointaccum, normalaccum);

    eidx = GetEdgeIdx(level, 2, global_cell_pos, offset);
    AddEdge(eidx, 2, vec3(0,0,0), valid, ATA, ATb, pointaccum, normalaccum);
    eidx = GetEdgeIdx(level, 2, uvec3(global_cell_pos.x + 1, global_cell_pos.y, global_cell_pos.z), offset);
    AddEdge(eidx, 2, vec3(1,0,0), valid, ATA, ATb, pointaccum, normalaccum);
    eidx = GetEdgeIdx(level, 2, uvec3(global_cell_pos.x, global_cell_pos.y + 1, global_cell_pos.z), offset);
    AddEdge(eidx, 2, vec3(0,1,0), valid, ATA, ATb, pointaccum, normalaccum);
    eidx = GetEdgeIdx(level, 2, uvec3(global_cell_pos.x + 1, global_cell_pos.y + 1, global_cell_pos.z), offset);
    AddEdge(eidx, 2, vec3(1,1,0), valid, ATA, ATb, pointaccum, normalaccum);

    if(valid){
        // VertPosition[vidx] = vec3(0.5f,0.5f,0.5f);
        vec4 pos;
        QEFSolve(ATA, ATb, pointaccum, pos);
        VertPosition[vidx] = pos.xyz;
        VertNormal[vidx] =  normalize(normalaccum / pointaccum.w);
    }
    // VertNormal[vidx] = 0;
}
