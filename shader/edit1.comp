#version 450
#extension GL_ARB_separate_shader_objects: enable
#extension GL_GOOGLE_include_directive : enable

#include "terrain_util.h"

layout(std430, set = 0, binding = 0) buffer GridInfoSSBO {
    ivec3 GridCenter[];
} ;
layout(std430, set = 0, binding = 1) buffer EditInfoSSBO {
    vec4 EditInfo;
    uint MaterialType;
} ;
layout (std430, set = 0, binding = 2) buffer EdgePositionSSBO {
    float EdgePosition[];
} ;
layout (std430, set = 0, binding = 3) buffer EdgeNormalSSBO {
    vec3 EdgeNormal[];
} ;
layout (std430, set = 0, binding = 4) buffer EdgeInfoSSBO {
    uint EdgeInfo[];
} ;
layout (std430, set = 0, binding = 5) buffer VertInfoSSBO {
    uint VertInfo[];
} ;

layout (local_size_x = 16, local_size_y = 16, local_size_z = 4) in;
void main ()
{
    vec3 EditCenter = EditInfo.xyz;
    float EditRadius = EditInfo.w;

    uint level = gl_WorkGroupID.x / gridStorageSize;
    uvec3 block_pos,cell_pos,global_cell_pos;
    block_pos.y = gl_WorkGroupID.y;
    block_pos.z = gl_WorkGroupID.z >> 2;
    block_pos.x = gl_WorkGroupID.x - level * gridStorageSize;
    cell_pos.xy = gl_LocalInvocationID.xy;
    cell_pos.z = ((gl_WorkGroupID.z & 3) << 2) + gl_LocalInvocationID.z;
    global_cell_pos = (block_pos << 4) + cell_pos;
    uvec3 offset = GridCenter[level] & 3;
    uint eidx = GetEdgeIdx(level, 0, block_pos, cell_pos, offset);
    uint vidx = GetVertIdx(level, block_pos, cell_pos, offset);
    uint size = 1 << level;
    ivec3 world_cell_pos = GetCellWorldPosition(ivec3(global_cell_pos), GridCenter[level], level);

    bool inbound = all(greaterThan(global_cell_pos, uvec3(0))) && all(lessThan(block_pos, uvec3(gridRenderSize)));
    // vec3 dir0 = EditCenter - world_cell_pos;
    // float dist0 = length(dir0);
    // float rdist0 = dist0 - EditRadius;

    ///////////////////////////X//////////////////////////////////
    uint info = EdgeInfo[eidx];
    if((info & 1) > 0){ //cross surface
        float len = EdgePosition[eidx];
        if((info & 8) > 0){ //en->st
            vec3 dir0 = EditCenter - (world_cell_pos + vec3(size, 0, 0));
            float dist0 = length(dir0);
            float rdist0 = dist0 - EditRadius;
            float dist1 = distance(world_cell_pos + vec3(len * size, 0, 0), EditCenter);
            float rdist1 = dist1 - EditRadius;

            if(rdist0 < 0){
                EdgeInfo[eidx] = 0;
            }else if((rdist1 < 0) && (info & (1<<4)) == 0 && inbound){
                float l = 0;
                if(rdist0 > 0){
                    float p = -dir0.x;
                    float s = sqrt(EditRadius * EditRadius - dist0 * dist0 + p * p);
                    l = p - s;
                }
                // else{ //dist0 = 0
                //     EdgePosition[eidx] = 0;
                // }
                EdgePosition[eidx] = 1.0f - l / size;
                EdgeNormal[eidx] = normalize(dir0 - vec3(-l, 0, 0));
            }
        }else{ //st->en
            vec3 dir0 = EditCenter - world_cell_pos;
            float dist0 = length(dir0);
            float rdist0 = dist0 - EditRadius;
            float dist1 = distance(world_cell_pos + vec3(len * size, 0, 0), EditCenter);
            float rdist1 = dist1 - EditRadius;

            if(rdist0 < 0){
                EdgeInfo[eidx] = 0;
                VertInfo[vidx] = 0;
            }else if((rdist1 < 0) && (info & (1<<4)) == 0 && inbound){
                float l = 0;
                if(rdist0 > 0){
                    float p = dir0.x;
                    float s = sqrt(EditRadius * EditRadius - dist0 * dist0 + p * p);
                    l = p - s;
                }
                // else{ //dist0 = 0
                //     EdgePosition[eidx] = 0;
                // }
                EdgePosition[eidx] = l / size;
                EdgeNormal[eidx] = normalize(dir0 - vec3(l, 0, 0));
            }
        }
    }else if((info & 8) > 0){//inside surface
        vec3 dir0 = EditCenter - world_cell_pos;
        float dist0 = length(dir0);
        float rdist0 = dist0 - EditRadius;
        float dist1 = distance(world_cell_pos + vec3(size, 0, 0), EditCenter);
        float rdist1 = dist1 - EditRadius;

        if(rdist1 * rdist0 < 0 || (rdist0 == 0 && rdist1 < 0) || (rdist0 < 0 && rdist1 == 0)){
            if((info & (1<<4)) > 0 || !inbound){
                if(rdist0 < 0){
                    if(EdgeNormal[eidx].x < 0) 
                        EdgeNormal[eidx] = -EdgeNormal[eidx];
                }else{
                    if(EdgeNormal[eidx].x > 0) 
                        EdgeNormal[eidx] = -EdgeNormal[eidx];
                }
            }else{
                float p = dir0.x;
                float s = sqrt(EditRadius * EditRadius - dist0 * dist0 + p * p);
                // float l = rdist0 < 0 ? p + s : p - s;
                float l;
                if(rdist0 < 0)
                    l = p + s;
                else if(rdist0 == 0)
                    l = 0;
                else
                    l = p - s;
                
                EdgePosition[eidx] = l / size;
                EdgeNormal[eidx] = normalize(dir0 - vec3(l, 0, 0));
            }

            if(rdist0 < 0){
                EdgeInfo[eidx] = 1 + (1 << 3);
                VertInfo[vidx] = 0;
            }else{
                EdgeInfo[eidx] = 1;
            }
        }else if(rdist0 < 0){
            EdgeInfo[eidx] = 0;
            VertInfo[vidx] = 0;
        }
    }

    // if(info & 9){
    //     float dist1 = distance(world_cell_pos + vec3(size, 0, 0), EditCenter);
    //     float rdist1 = dist1 - EditRadius;
    //     if(rdist1 * rdist0 < 0 || (rdist0 == 0 && rdist1 < 0) || (rdist0 < 0 && rdist1 == 0)){
    //         float p = dir0.x;
    //         float s = sqrt(EditRadius * EditRadius - dist0 * dist0 + p * p);
    //         // float l = rdist0 < 0 ? p + s : p - s;
    //         float l;
    //         if(rdist0 < 0)
    //             l = p + s;
    //         else if(rdist0 == 0)
    //             l = 0;
    //         else
    //             l = p - s;
            
    //         if((info & 1) && (info & 8))
    //             EdgePosition[eidx] = max(EdgePosition[eidx], l / size);
    //         else if(info & 1)
    //             EdgePosition[eidx] = min(EdgePosition[eidx], l / size);
    //         else
    //             EdgePosition[eidx] = l / size;

    //         EdgeNormal[eidx] = normalize(dir0 - vec3(l, 0, 0));
    //         EdgeInfo[eidx] = 1 + ((rdist0 < 0) << 3);
    //     }else if(rdist0 < 0){
    //         EdgeInfo[eidx] = 0;
    //     }
    // }



    ///////////////////////////Y//////////////////////////////////
    eidx += blockSize3;
    info = EdgeInfo[eidx];

    if((info & 1) > 0){ //cross surface
        float len = EdgePosition[eidx];
        if((info & 8) > 0){ //en->st
            vec3 dir0 = EditCenter - (world_cell_pos + vec3(0, size, 0));
            float dist0 = length(dir0);
            float rdist0 = dist0 - EditRadius;
            float dist1 = distance(world_cell_pos + vec3(0, len * size, 0), EditCenter);
            float rdist1 = dist1 - EditRadius;

            if(rdist0 < 0){
                EdgeInfo[eidx] = 2;
            }else if((rdist1 < 0) && (info & (1<<4)) == 0 && inbound){
                float l = 0;
                if(rdist0 > 0){
                    float p = -dir0.y;
                    float s = sqrt(EditRadius * EditRadius - dist0 * dist0 + p * p);
                    l = p - s;
                }
                // else{ //dist0 = 0
                //     EdgePosition[eidx] = 0;
                // }
                EdgePosition[eidx] = 1.0f - l / size;
                EdgeNormal[eidx] = normalize(dir0 - vec3(0, -l, 0));
            }
        }else{ //st->en
            vec3 dir0 = EditCenter - world_cell_pos;
            float dist0 = length(dir0);
            float rdist0 = dist0 - EditRadius;
            float dist1 = distance(world_cell_pos + vec3(0, len * size, 0), EditCenter);
            float rdist1 = dist1 - EditRadius;

            if(rdist0 < 0){
                EdgeInfo[eidx] = 2;
                VertInfo[vidx] = 0;
            }else if((rdist1 < 0) && (info & (1<<4)) == 0 && inbound){
                float l = 0;
                if(rdist0 > 0){
                    float p = dir0.y;
                    float s = sqrt(EditRadius * EditRadius - dist0 * dist0 + p * p);
                    l = p - s;
                }
                // else{ //dist0 = 0
                //     EdgePosition[eidx] = 0;
                // }
                EdgePosition[eidx] = l / size;
                EdgeNormal[eidx] = normalize(dir0 - vec3(0, l, 0));
            }
        }
    }else if((info & 8) > 0){//inside surface
        vec3 dir0 = EditCenter - world_cell_pos;
        float dist0 = length(dir0);
        float rdist0 = dist0 - EditRadius;
        float dist1 = distance(world_cell_pos + vec3(0, size, 0), EditCenter);
        float rdist1 = dist1 - EditRadius;

        if(rdist1 * rdist0 < 0 || (rdist0 == 0 && rdist1 < 0) || (rdist0 < 0 && rdist1 == 0)){
            if((info & (1<<4)) > 0 || !inbound){
                if(rdist0 < 0){
                    if(EdgeNormal[eidx].y < 0) 
                        EdgeNormal[eidx] = -EdgeNormal[eidx];
                }else{
                    if(EdgeNormal[eidx].y > 0) 
                        EdgeNormal[eidx] = -EdgeNormal[eidx];
                }
            }else{
                float p = dir0.y;
                float s = sqrt(EditRadius * EditRadius - dist0 * dist0 + p * p);
                // float l = rdist0 < 0 ? p + s : p - s;
                float l;
                if(rdist0 < 0)
                    l = p + s;
                else if(rdist0 == 0)
                    l = 0;
                else
                    l = p - s;
                
                EdgePosition[eidx] = l / size;
                EdgeNormal[eidx] = normalize(dir0 - vec3(0, l, 0));
            }

            if(rdist0 < 0){
                EdgeInfo[eidx] = 3 + (1 << 3);
                VertInfo[vidx] = 0;
            }else{
                EdgeInfo[eidx] = 3;
            }
        }else if(rdist0 < 0){
            EdgeInfo[eidx] = 2;
            VertInfo[vidx] = 0;
        }
    }
    // if(info & 9){
    //     float dist1 = distance(world_cell_pos + vec3(0, size, 0), EditCenter);
    //     float rdist1 = dist1 - EditRadius;
    //     if(rdist1 * rdist0 < 0 || (rdist0 == 0 && rdist1 < 0) || (rdist0 < 0 && rdist1 == 0)){
    //         float p = dir0.y;
    //         float s = sqrt(EditRadius * EditRadius - dist0 * dist0 + p * p);
    //         // float l = rdist0 < 0 ? p + s : p - s;
    //         float l;
    //         if(rdist0 < 0)
    //             l = p + s;
    //         else if(rdist0 == 0)
    //             l = 0;
    //         else
    //             l = p - s;

    //         if((info & 1) && (info & 8)){
    //             EdgePosition[eidx] = max(EdgePosition[eidx], l / size);
    //         }
    //         else if(info & 1){
    //             EdgePosition[eidx] = min(EdgePosition[eidx], l / size);
    //         }
    //         else{
    //             EdgePosition[eidx] = l / size;
    //         }

    //         EdgeNormal[eidx] = normalize(dir0 - vec3(0, l, 0));
    //         EdgeInfo[eidx] = 3 + ((rdist0 < 0) << 3);
    //     }else if(rdist0 < 0){
    //         EdgeInfo[eidx] = 2;
    //     }
    // }

    ///////////////////////////Z//////////////////////////////////
    eidx += blockSize3;
    info = EdgeInfo[eidx];

    if((info & 1) > 0){ //cross surface
        float len = EdgePosition[eidx];
        if((info & 8) > 0){ //en->st
            vec3 dir0 = EditCenter - (world_cell_pos + vec3(0, 0, size));
            float dist0 = length(dir0);
            float rdist0 = dist0 - EditRadius;
            float dist1 = distance(world_cell_pos + vec3(0, 0, len * size), EditCenter);
            float rdist1 = dist1 - EditRadius;

            if(rdist0 < 0){
                EdgeInfo[eidx] = 4;
            }else if((rdist1 < 0) && (info & (1<<4)) == 0 && inbound){
                float l = 0;
                if(rdist0 > 0){
                    float p = -dir0.z;
                    float s = sqrt(EditRadius * EditRadius - dist0 * dist0 + p * p);
                    l = p - s;
                }
                // else{ //dist0 = 0
                //     EdgePosition[eidx] = 0;
                // }
                EdgePosition[eidx] = 1.0f - l / size;
                EdgeNormal[eidx] = normalize(dir0 - vec3(0, 0, -l));
            }
        }else{ //st->en
            vec3 dir0 = EditCenter - world_cell_pos;
            float dist0 = length(dir0);
            float rdist0 = dist0 - EditRadius;
            float dist1 = distance(world_cell_pos + vec3(0, 0, len * size), EditCenter);
            float rdist1 = dist1 - EditRadius;

            if(rdist0 < 0){
                EdgeInfo[eidx] = 4;
                VertInfo[vidx] = 0;
            }else if((rdist1 < 0) && (info & (1<<4)) == 0 && inbound){
                float l = 0;
                if(rdist0 > 0){
                    float p = dir0.z;
                    float s = sqrt(EditRadius * EditRadius - dist0 * dist0 + p * p);
                    l = p - s;
                }
                // else{ //dist0 = 0
                //     EdgePosition[eidx] = 0;
                // }
                EdgePosition[eidx] = l / size;
                EdgeNormal[eidx] = normalize(dir0 - vec3(0, 0, l));
            }
        }
    }else if((info & 8) > 0){//inside surface
        vec3 dir0 = EditCenter - world_cell_pos;
        float dist0 = length(dir0);
        float rdist0 = dist0 - EditRadius;
        float dist1 = distance(world_cell_pos + vec3(0, 0, size), EditCenter);
        float rdist1 = dist1 - EditRadius;

        if(rdist1 * rdist0 < 0 || (rdist0 == 0 && rdist1 < 0) || (rdist0 < 0 && rdist1 == 0)){
            if((info & (1<<4)) > 0 || !inbound){
                if(rdist0 < 0){
                    if(EdgeNormal[eidx].z < 0) 
                        EdgeNormal[eidx] = -EdgeNormal[eidx];
                }else{
                    if(EdgeNormal[eidx].z > 0) 
                        EdgeNormal[eidx] = -EdgeNormal[eidx];
                }
            }else{
                float p = dir0.z;
                float s = sqrt(EditRadius * EditRadius - dist0 * dist0 + p * p);
                // float l = rdist0 < 0 ? p + s : p - s;
                float l;
                if(rdist0 < 0)
                    l = p + s;
                else if(rdist0 == 0)
                    l = 0;
                else
                    l = p - s;
                
                EdgePosition[eidx] = l / size;
                EdgeNormal[eidx] = normalize(dir0 - vec3(0, 0, l));
            }

            if(rdist0 < 0){
                EdgeInfo[eidx] = 5 + (1 << 3);
                VertInfo[vidx] = 0;
            }else{
                EdgeInfo[eidx] = 5;
            }
        }else if(rdist0 < 0){
            EdgeInfo[eidx] = 4;
            VertInfo[vidx] = 0;
        }
    }
    // if(info & 9){
    //     float dist1 = distance(world_cell_pos + vec3(0, 0, size), EditCenter);
    //     float rdist1 = dist1 - EditRadius;
    //     if(rdist1 * rdist0 < 0 || (rdist0 == 0 && rdist1 < 0) || (rdist0 < 0 && rdist1 == 0)){
    //         float p = dir0.z;
    //         float s = sqrt(EditRadius * EditRadius - dist0 * dist0 + p * p);
    //         // float l = rdist0 < 0 ? p + s : p - s;
    //         float l;
    //         if(rdist0 < 0)
    //             l = p + s;
    //         else if(rdist0 == 0)
    //             l = 0;
    //         else
    //             l = p - s;
            
    //         if((info & 1) && (info & 8))
    //             EdgePosition[eidx] = max(EdgePosition[eidx], l / size);
    //         else if(info & 1)
    //             EdgePosition[eidx] = min(EdgePosition[eidx], l / size);
    //         else
    //             EdgePosition[eidx] = l / size;

    //         EdgeNormal[eidx] = normalize(dir0 - vec3(0, 0, l));
    //         EdgeInfo[eidx] = 5 + ((rdist0 < 0) << 3);
    //     }else if(rdist0 < 0){
    //         EdgeInfo[eidx] = 4;
    //     }
    // }
}
