#version 450
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : enable
#extension GL_EXT_shader_8bit_storage : enable
#extension GL_EXT_shader_16bit_storage : enable
#extension GL_ARB_separate_shader_objects: enable
#extension GL_GOOGLE_include_directive : enable
#include "terrain_util.h"

layout(std430, set = 0, binding = 0) buffer GridInfoSSBO {
    ivec3 GridCenter[16];
} ;

layout (std430, set = 0, binding = 1) buffer GenerationInfoSSBO {
    bool BatchGeneration;
    int Level;
} ;

layout (std430, set = 0, binding = 2) buffer LocalBlockPosSSBO {
    ivec3 LocalBlockPos[];
} ;

layout (std430, set = 0, binding = 3) buffer EdgePositionSSBO {
    uint8_t EdgePosition[];
} ;

layout (std430, set = 0, binding = 4) buffer EdgeNormalSSBO {
    u8vec2 EdgeNormal[];
} ;

layout (std430, set = 0, binding = 5) buffer EdgeInfoSSBO {
    uint8_t EdgeInfo[];
} ;

layout (std430, set = 0, binding = 6) buffer VertInfoSSBO {
    uint16_t VertInfo[];
} ;

vec2 Random(vec2 vec)
{
    vec = vec2(dot(vec, vec2(127.1, 311.7)), dot(vec, vec2(269.5, 183.3)));
    return -1.0 + 2.0 * fract(sin(vec) * 43758.5453123);
}
float Perlin(vec2 pos)
{
    vec2 pi = floor(pos);
    vec2 pf = fract(pos);
    vec2 w = pf * pf * (3.0 - 2.0 * pf);

    return mix(mix(dot(Random(pi + vec2(0.0, 0.0)), pf - vec2(0.0, 0.0)),
                   dot(Random(pi + vec2(1.0, 0.0)), pf - vec2(1.0, 0.0)), w.x),
               mix(dot(Random(pi + vec2(0.0, 1.0)), pf - vec2(0.0, 1.0)),
                   dot(Random(pi + vec2(1.0, 1.0)), pf - vec2(1.0, 1.0)), w.x),
               w.y);
}

float GetHeight(vec3 world_cell_pos)
{
    //return -3.5;
    return sin(world_cell_pos.x - 48) + sin(world_cell_pos.z - 48) - 5.5;
    // float ret = 0;
    // float weights[] = {0.2,0.4,0.4,0.5,0.7,0.8,0.9,1.0,1.0,1.0};
    // // [unroll]
    // for(uint level = 1; level <= 10; level++)
    //     ret += weights[level - 1] * Perlin(world_cell_pos.xz / float(1 << (level + 2))) * float(1 << level);
    // if(ret == floor(ret)) ret += 0.01;
    // return ret;
}

float CalcEdgePosition(vec3 st, uint size, uint dim, float det0)
{
    float ret = 0;
    st[dim] += 1 / 16.0f * size;
    for(int i = 0; i < 16; i++){
        float det = GetHeight(st) - st.y;
        if((det <= 0 && det0 > 0) || (det >= 0 && det0 < 0))
            return ret + 1 / 32.0f;
        ret += 1 / 16.0f;
        st[dim] += 1 / 16.0f * size;
    }
    return ret - 1 / 32.0f;
}   

float GetDensity(vec3 pos){
    return pos.y - GetHeight(pos);
}

vec3 CalcEdgeNormal(vec3 pos)
{
    vec3 ret;
    ret.x = GetDensity(pos + vec3(0.001,0,0)) - GetDensity(pos - vec3(0.001,0,0));
    ret.y = GetDensity(pos + vec3(0,0.001,0)) - GetDensity(pos - vec3(0,0.001,0));
    ret.z = GetDensity(pos + vec3(0,0,0.001)) - GetDensity(pos - vec3(0,0,0.001));
    return normalize(ret);
}

//TODO：地形生成时应该生成内部属性
layout (local_size_x = 16, local_size_y = 16, local_size_z = 4) in;
void main()
{
    uint level;
    uvec3 block_pos, cell_pos, global_cell_pos;
    if(BatchGeneration){
        level = gl_WorkGroupID.x / gridStorageSize;
        block_pos.y = gl_WorkGroupID.y;
        block_pos.z = gl_WorkGroupID.z >> 2;
        block_pos.x = gl_WorkGroupID.x - level * gridStorageSize;
        cell_pos.xy = gl_LocalInvocationID.xy;
        cell_pos.z = ((gl_WorkGroupID.z & 3) << 2) + gl_LocalInvocationID.z;
    }else{
        level = Level;
        block_pos = LocalBlockPos[gl_WorkGroupID.x].xyz;
        cell_pos.xy = gl_LocalInvocationID.xy;
        cell_pos.z = ((gl_WorkGroupID.y & 3) << 2) + gl_LocalInvocationID.z;
    }
    global_cell_pos = (block_pos << 4) + cell_pos;
    uvec3 offset = GridCenter[level].xyz & 3;
    uint vidx = GetVertIdx(level, block_pos, cell_pos, offset);
    uint eidx = GetEdgeIdx(level, 0, block_pos, cell_pos, offset);
    uint size = 1 << level;
    ivec3 world_cell_pos = GetCellWorldPosition(ivec3(global_cell_pos), GridCenter[level].xyz, level);

    float height0 = GetHeight(world_cell_pos) - float(world_cell_pos.y);

    VertInfo[vidx] = uint16_t(height0 > 0 ? (1 << 14) : 0);
    ///////////////////////////X//////////////////////////////////
    float height1 = GetHeight(world_cell_pos + vec3(size, 0, 0)) - float(world_cell_pos.y);
    // EdgeInfo[eidx] = 0;
    if (height0 * height1 < 0) // MAY OVERFLOW?
    {
        EdgeInfo[eidx] = uint8_t(1 + (uint(height0 < 0) << 3));
        float pos = CalcEdgePosition(world_cell_pos, size, 0, height0);
        EdgePosition[eidx] = uint8_t(pos * 255.0);//abs(height0) / (abs(height0) + abs(height1));
        EdgeNormal[eidx] = EncodeNormal(CalcEdgeNormal(world_cell_pos + vec3(pos * level, 0, 0)));
    }
    else if (height0 == 0 && height1 > 0)
    {
        // TODO h1 == 0
        EdgeInfo[eidx] = uint8_t(1 + (1 << 3));
        EdgePosition[eidx] = uint8_t(0);
        EdgeNormal[eidx] = EncodeNormal(CalcEdgeNormal(world_cell_pos));
    }
    else if (height1 == 0 && height0 > 0)
    {
        EdgeInfo[eidx] = uint8_t(1);
        EdgePosition[eidx] = uint8_t(255);
        EdgeNormal[eidx] = EncodeNormal(CalcEdgeNormal(world_cell_pos + vec3(level, 0, 0)));
    } //TODO both zero
    else
    {
        EdgeInfo[eidx] = uint8_t(0 + (uint(height0 > 0) << 3));
    }
    // EdgeInfo[eidx] = 0;
    //EdgeNormal[eidx] = vec3(1.0f, 0.0f, 0.0f);

    ///////////////////////////Y//////////////////////////////////
    eidx += blockSize3;
    height1 = GetHeight(world_cell_pos + ivec3(0, size, 0)) - world_cell_pos.y - size;
    // EdgeInfo[eidx] = 2;
    if (height0 * height1 < 0) // MAY OVERFLOW?
    {
        EdgeInfo[eidx] = uint8_t(3);
        float pos = CalcEdgePosition(world_cell_pos, size, 1, height0);
        EdgePosition[eidx] = uint8_t(pos * 255.0);//abs(height0) / (size * 1.0f);
        EdgeNormal[eidx] = EncodeNormal(CalcEdgeNormal(world_cell_pos + vec3(0, pos * level, 0)));
    }
    else if (height1 == 0 && height0 > 0)
    {
        EdgeInfo[eidx] = uint8_t(3);
        EdgePosition[eidx] = uint8_t(255);
        EdgeNormal[eidx] = EncodeNormal(CalcEdgeNormal(world_cell_pos + vec3(0, level, 0)));
    }
    else
    {
        EdgeInfo[eidx] = uint8_t(2 + (uint(height0 > 0) << 3));
    }
    // EdgeInfo[eidx] = 2;
    // EdgeNormal[eidx] = vec3(0.0f, 1.0f, 0.0f);

    ///////////////////////////Z//////////////////////////////////
    eidx += blockSize3;
    height1 = GetHeight(world_cell_pos + ivec3(0, 0, size)) - world_cell_pos.y;
    // EdgeInfo[eidx] = 4;
    if (height0 * height1 < 0) // MAY OVERFLOW?
    {
        EdgeInfo[eidx] = uint8_t(5 + (uint(height0 < 0) << 3));
        float pos = CalcEdgePosition(world_cell_pos, size, 2, height0);
        EdgePosition[eidx] = uint8_t(pos * 255.0);//abs(height0) / (abs(height0) + abs(height1));
        EdgeNormal[eidx] = EncodeNormal(CalcEdgeNormal(world_cell_pos + vec3(0, 0, pos * level)));
    }
    else if(height0 == 0 && height1 > 0){
        EdgeInfo[eidx] = uint8_t(5 + (1 << 3));
        EdgePosition[eidx] = uint8_t(0);
        EdgeNormal[eidx] = EncodeNormal(CalcEdgeNormal(world_cell_pos));
    }
    else if(height1 == 0 && height0 > 0){
        EdgeInfo[eidx] = uint8_t(5);
        EdgePosition[eidx] = uint8_t(255);
        EdgeNormal[eidx] = EncodeNormal(CalcEdgeNormal(world_cell_pos + vec3(0, 0, level)));
    }
    else
    {
        EdgeInfo[eidx] = uint8_t(4 + (uint(height0 > 0) << 3));
    }
    // EdgeInfo[eidx] = 4;
    // EdgeNormal[eidx] = vec3(0.0f, 0.0f, 1.0f);

    // uint level;
    // uvec3 block_pos, cell_pos, global_cell_pos;

    // level = gl_WorkGroupID.x / gridStorageSize;
    // block_pos.y = gl_WorkGroupID.y;
    // block_pos.z = gl_WorkGroupID.z >> 2;
    // block_pos.x = gl_WorkGroupID.x - level * gridStorageSize;
    // cell_pos.xy = gl_LocalInvocationID.xy;
    // cell_pos.z = ((gl_WorkGroupID.z & 3) << 2) + gl_LocalInvocationID.z;

    // global_cell_pos = (block_pos << 4) + cell_pos;
    // uvec3 offset = uvec3(0,0,0);

    // uint eidx = GetEdgeIdx(level, 1, block_pos, cell_pos, offset);
    // EdgePosition[eidx] = 0.114514;
}